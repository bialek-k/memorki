{"ast":null,"code":"var _jsxFileName = \"D:\\\\Krzysiek\\\\Programowanie\\\\Memorki\\\\src\\\\store\\\\game-context.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { CardsIcons } from \"../utilities/cards\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GameContext = /*#__PURE__*/createContext({\n  cards: [],\n  flipBackCards: () => {},\n  changeCardSide: () => {},\n  player: \"\",\n  points: 0,\n  setPoints: () => {}\n});\nexport const GameContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [cards, setCards] = useState(CardsIcons);\n  const [player, setPlayer] = useState(\"Igor\");\n  const [points, setPoints] = useState(0);\n  const [firstChoice, setFirstChoice] = useState([]);\n  const [secondChoice, setSecondChoice] = useState([]);\n  const [foundedCards, setFoundedCards] = useState([]);\n  const flipBackCards = () => {\n    setTimeout(() => {\n      const flipped = cards.map(singleCard => {\n        return {\n          ...singleCard,\n          flipped: !singleCard.flipped\n        };\n      });\n      setCards(flipped);\n    }, 1000);\n  };\n  const changeCardSide = (id, image) => {\n    const newArr = cards.map(card => {\n      if (card.id === id) {\n        const newSide = {\n          ...card,\n          flipped: !card.flipped\n        };\n        compareHandler(card.id);\n        return newSide;\n      }\n      return card;\n    });\n    setCards(newArr);\n  };\n  const compareHandler = id => {\n    if (firstChoice.length === 0) {\n      const firstCard = cards.filter(card => card.id === id);\n      setFirstChoice(firstCard);\n    } else {\n      const secondCard = cards.filter(card => card.id === id);\n      setSecondChoice(secondCard);\n    }\n\n    // if (firstChoice) setSecondChoice(id);\n\n    // if (firstChoice === secondChoice && firstChoice && secondChoice) {\n    //   setFoundedCardsId([firstChoice, secondChoice]);\n    //   setFirstChoice(null);\n    //   setSecondChoice(null);\n    // }\n  };\n\n  useEffect(() => {\n    if (firstChoice.length === 1 && secondChoice.length === 1) {\n      if (firstChoice[0].image === secondChoice[0].image) {\n        setFoundedCards(firstChoice);\n      }\n    }\n  }, [firstChoice, secondChoice]);\n  console.log(firstChoice, secondChoice);\n  const contextValue = {\n    cards,\n    flipBackCards,\n    changeCardSide,\n    player,\n    setPlayer,\n    points,\n    setPoints\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(GameContextProvider, \"gKIAEwmqyWUQle+Ex0ruak7d2rY=\");\n_c = GameContextProvider;\nvar _c;\n$RefreshReg$(_c, \"GameContextProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","CardsIcons","GameContext","cards","flipBackCards","changeCardSide","player","points","setPoints","GameContextProvider","children","setCards","setPlayer","firstChoice","setFirstChoice","secondChoice","setSecondChoice","foundedCards","setFoundedCards","setTimeout","flipped","map","singleCard","id","image","newArr","card","newSide","compareHandler","length","firstCard","filter","secondCard","console","log","contextValue"],"sources":["D:/Krzysiek/Programowanie/Memorki/src/store/game-context.tsx"],"sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\r\n\r\nimport { CardsIcons } from \"../utilities/cards\";\r\n\r\ntype CardsIconsType = {\r\n  image: string;\r\n  id: number;\r\n  flipped: boolean;\r\n};\r\n\r\ntype GameContextObj = {\r\n  cards: [];\r\n  flipBackCards: () => void;\r\n  changeCardSide: () => void;\r\n  player: string;\r\n  points: number;\r\n  setPoints: () => void;\r\n};\r\n\r\nexport const GameContext = createContext<GameContextObj>({\r\n  cards: [],\r\n  flipBackCards: () => {},\r\n  changeCardSide: () => {},\r\n  player: \"\",\r\n  points: 0,\r\n  setPoints: () => {},\r\n});\r\n\r\nexport const GameContextProvider: React.FC<{ children: React.ReactNode }> = ({\r\n  children,\r\n}) => {\r\n  const [cards, setCards] = useState(CardsIcons);\r\n  const [player, setPlayer] = useState(\"Igor\");\r\n  const [points, setPoints] = useState(0);\r\n  const [firstChoice, setFirstChoice] = useState<CardsIconsType[]>([]);\r\n  const [secondChoice, setSecondChoice] = useState<CardsIconsType[]>([]);\r\n  const [foundedCards, setFoundedCards] = useState<CardsIconsType[]>([]);\r\n\r\n  const flipBackCards = () => {\r\n    setTimeout(() => {\r\n      const flipped = cards.map((singleCard) => {\r\n        return {\r\n          ...singleCard,\r\n          flipped: !singleCard.flipped,\r\n        };\r\n      });\r\n      setCards(flipped);\r\n    }, 1000);\r\n  };\r\n\r\n  const changeCardSide = (id: number, image: string) => {\r\n    const newArr = cards.map((card: CardsIconsType) => {\r\n      if (card.id === id) {\r\n        const newSide = {\r\n          ...card,\r\n          flipped: !card.flipped,\r\n        };\r\n        compareHandler(card.id);\r\n        return newSide;\r\n      }\r\n      return card;\r\n    });\r\n    setCards(newArr);\r\n  };\r\n\r\n  const compareHandler = (id: number) => {\r\n    if (firstChoice.length === 0) {\r\n      const firstCard = cards.filter((card) => card.id === id);\r\n      setFirstChoice(firstCard);\r\n    } else {\r\n      const secondCard = cards.filter((card) => card.id === id);\r\n      setSecondChoice(secondCard);\r\n    }\r\n\r\n    // if (firstChoice) setSecondChoice(id);\r\n\r\n    // if (firstChoice === secondChoice && firstChoice && secondChoice) {\r\n    //   setFoundedCardsId([firstChoice, secondChoice]);\r\n    //   setFirstChoice(null);\r\n    //   setSecondChoice(null);\r\n    // }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (firstChoice.length === 1 && secondChoice.length === 1) {\r\n      if (firstChoice[0].image === secondChoice[0].image) {\r\n        setFoundedCards(firstChoice);\r\n      }\r\n    }\r\n  }, [firstChoice, secondChoice]);\r\n\r\n  console.log(firstChoice, secondChoice);\r\n\r\n  const contextValue: any = {\r\n    cards,\r\n    flipBackCards,\r\n    changeCardSide,\r\n    player,\r\n    setPlayer,\r\n    points,\r\n    setPoints,\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider value={contextValue}>{children}</GameContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}