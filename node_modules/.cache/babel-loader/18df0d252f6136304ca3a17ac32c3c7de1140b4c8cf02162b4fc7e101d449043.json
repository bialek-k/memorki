{"ast":null,"code":"var _jsxFileName = \"D:\\\\Krzysiek\\\\Programowanie\\\\Memorki\\\\src\\\\store\\\\game-context.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { CardsIcons } from \"../utilities/cards\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GameContext = /*#__PURE__*/createContext({\n  cards: [],\n  flipBackCards: () => {},\n  changeCardSide: () => {},\n  player: \"\",\n  setPlayer: name => {},\n  points: 0,\n  setPoints: () => {},\n  finishGame: false\n});\nexport const GameContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [cards, setCards] = useState(CardsIcons);\n  const [player, setPlayer] = useState(\"Igor\");\n  const [points, setPoints] = useState(0);\n  const [firstChoice, setFirstChoice] = useState([]);\n  const [secondChoice, setSecondChoice] = useState([]);\n  const [foundedCards, setFoundedCards] = useState([]);\n  const [finishGame, setFinishGame] = useState(false);\n  const flipBackCards = () => {\n    setTimeout(() => {\n      const flipped = cards.map(singleCard => {\n        return {\n          ...singleCard,\n          flipped: false\n        };\n      });\n      setCards(flipped);\n    }, 1000);\n  };\n  const changeCardSide = (id, image) => {\n    const newArr = cards.map(card => {\n      if (card.id === id) {\n        const newSide = {\n          ...card,\n          flipped: !card.flipped\n        };\n        setCardsHandler(card.id);\n        return newSide;\n      }\n      return card;\n    });\n    setCards(newArr);\n  };\n  const setCardsHandler = id => {\n    if (firstChoice.length === 0) {\n      const firstCard = cards.filter(card => card.id === id);\n      setFirstChoice(firstCard);\n    } else {\n      const secondCard = cards.filter(card => card.id === id);\n      setSecondChoice(secondCard);\n    }\n  };\n  const matchedCardHandler = () => {\n    const matchedCards = cards.map(card => {\n      if (card.flipped === true) {\n        return {\n          ...card,\n          matched: true\n        };\n      }\n      return card;\n    });\n    setCards(matchedCards);\n  };\n  const finishGameHandler = () => {\n    const allMatchedCards = cards.filter(card => card.matched === true);\n    if (allMatchedCards.length === cards.length) {\n      setFinishGame(true);\n    }\n  };\n  useEffect(() => {\n    if (firstChoice.length === 1 && secondChoice.length === 1) {\n      if (firstChoice[0].image === secondChoice[0].image) {\n        setFoundedCards(firstChoice);\n        setFirstChoice([]);\n        setSecondChoice([]);\n        matchedCardHandler();\n      }\n      if (firstChoice[0].image !== secondChoice[0].image) {\n        const cardsToFlipBack = [firstChoice[0].id, secondChoice[0].id];\n        const updatedCards = cards.map(card => {\n          if (cardsToFlipBack.includes(card.id)) {\n            return {\n              ...card,\n              flipped: !card.flipped\n            };\n          }\n          return card;\n        });\n        setTimeout(() => {\n          setCards(updatedCards);\n          setFirstChoice([]);\n          setSecondChoice([]);\n        }, 1000);\n      }\n    }\n    finishGameHandler();\n  }, [firstChoice, secondChoice]);\n  const contextValue = {\n    cards,\n    flipBackCards,\n    changeCardSide,\n    player,\n    setPlayer,\n    points,\n    setPoints,\n    finishGame\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n_s(GameContextProvider, \"K6n6qJZPLkFCABXY4+6EO/v2+60=\");\n_c = GameContextProvider;\nvar _c;\n$RefreshReg$(_c, \"GameContextProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","CardsIcons","GameContext","cards","flipBackCards","changeCardSide","player","setPlayer","name","points","setPoints","finishGame","GameContextProvider","children","setCards","firstChoice","setFirstChoice","secondChoice","setSecondChoice","foundedCards","setFoundedCards","setFinishGame","setTimeout","flipped","map","singleCard","id","image","newArr","card","newSide","setCardsHandler","length","firstCard","filter","secondCard","matchedCardHandler","matchedCards","matched","finishGameHandler","allMatchedCards","cardsToFlipBack","updatedCards","includes","contextValue"],"sources":["D:/Krzysiek/Programowanie/Memorki/src/store/game-context.tsx"],"sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\r\n\r\nimport { CardsIcons } from \"../utilities/cards\";\r\n\r\ntype CardsIconsType = {\r\n  image: string;\r\n  id: number;\r\n  flipped: boolean;\r\n  matched: boolean;\r\n};\r\n\r\ntype GameContextObj = {\r\n  cards: [];\r\n  flipBackCards: () => void;\r\n  changeCardSide: () => void;\r\n  player: string;\r\n  setPlayer: (name: string) => void;\r\n  points: number;\r\n  setPoints: () => void;\r\n  finishGame: boolean;\r\n};\r\n\r\nexport const GameContext = createContext<GameContextObj>({\r\n  cards: [],\r\n  flipBackCards: () => {},\r\n  changeCardSide: () => {},\r\n  player: \"\",\r\n  setPlayer: (name) => {},\r\n  points: 0,\r\n  setPoints: () => {},\r\n  finishGame: false,\r\n});\r\n\r\nexport const GameContextProvider: React.FC<{ children: React.ReactNode }> = ({\r\n  children,\r\n}) => {\r\n  const [cards, setCards] = useState(CardsIcons);\r\n  const [player, setPlayer] = useState(\"Igor\");\r\n  const [points, setPoints] = useState(0);\r\n  const [firstChoice, setFirstChoice] = useState<CardsIconsType[]>([]);\r\n  const [secondChoice, setSecondChoice] = useState<CardsIconsType[]>([]);\r\n  const [foundedCards, setFoundedCards] = useState<CardsIconsType[]>([]);\r\n  const [finishGame, setFinishGame] = useState(false);\r\n\r\n  const flipBackCards = () => {\r\n    setTimeout(() => {\r\n      const flipped = cards.map((singleCard) => {\r\n        return {\r\n          ...singleCard,\r\n          flipped: false,\r\n        };\r\n      });\r\n      setCards(flipped);\r\n    }, 1000);\r\n  };\r\n\r\n  const changeCardSide = (id: number, image: string) => {\r\n    const newArr = cards.map((card: CardsIconsType) => {\r\n      if (card.id === id) {\r\n        const newSide = {\r\n          ...card,\r\n          flipped: !card.flipped,\r\n        };\r\n        setCardsHandler(card.id);\r\n        return newSide;\r\n      }\r\n      return card;\r\n    });\r\n    setCards(newArr);\r\n  };\r\n\r\n  const setCardsHandler = (id: number) => {\r\n    if (firstChoice.length === 0) {\r\n      const firstCard = cards.filter((card) => card.id === id);\r\n      setFirstChoice(firstCard);\r\n    } else {\r\n      const secondCard = cards.filter((card) => card.id === id);\r\n      setSecondChoice(secondCard);\r\n    }\r\n  };\r\n\r\n  const matchedCardHandler = () => {\r\n    const matchedCards: any = cards.map((card) => {\r\n      if (card.flipped === true) {\r\n        return {\r\n          ...card,\r\n          matched: true,\r\n        };\r\n      }\r\n      return card;\r\n    });\r\n    setCards(matchedCards);\r\n  };\r\n\r\n  const finishGameHandler = () => {\r\n    const allMatchedCards = cards.filter((card) => card.matched === true);\r\n    if (allMatchedCards.length === cards.length) {\r\n      setFinishGame(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (firstChoice.length === 1 && secondChoice.length === 1) {\r\n      if (firstChoice[0].image === secondChoice[0].image) {\r\n        setFoundedCards(firstChoice);\r\n        setFirstChoice([]);\r\n        setSecondChoice([]);\r\n        matchedCardHandler();\r\n      }\r\n\r\n      if (firstChoice[0].image !== secondChoice[0].image) {\r\n        const cardsToFlipBack = [firstChoice[0].id, secondChoice[0].id];\r\n\r\n        const updatedCards = cards.map((card: any) => {\r\n          if (cardsToFlipBack.includes(card.id)) {\r\n            return { ...card, flipped: !card.flipped };\r\n          }\r\n          return card;\r\n        });\r\n\r\n        setTimeout(() => {\r\n          setCards(updatedCards);\r\n          setFirstChoice([]);\r\n          setSecondChoice([]);\r\n        }, 1000);\r\n      }\r\n    }\r\n    finishGameHandler();\r\n  }, [firstChoice, secondChoice]);\r\n\r\n  const contextValue: any = {\r\n    cards,\r\n    flipBackCards,\r\n    changeCardSide,\r\n    player,\r\n    setPlayer,\r\n    points,\r\n    setPoints,\r\n    finishGame,\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider value={contextValue}>{children}</GameContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}